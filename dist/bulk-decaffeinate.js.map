{"version":3,"file":null,"sources":["../src/util/CLIError.js","../src/config/getFilesFromPathFile.js","../src/util/getFilesUnderPath.js","../src/util/getTrackedFiles.js","../src/util/FilePaths.js","../src/config/getFilesToProcess.js","../src/runner/makeCLIFn.js","../src/runner/makeDecaffeinateVerifyFn.js","../src/runner/runInParallel.js","../src/util/pluralize.js","../src/util/momentPreciseDiff.js","../src/runner/runWithProgressBar.js","../src/check.js","../src/clean.js","../src/util/execLive.js","../src/config/resolveConfig.js","../src/util/prependToFile.js","../src/modernize/prependCodePrefix.js","../src/modernize/prependMochaEnv.js","../src/modernize/runEslintFix.js","../src/modernize/runFixImports.js","../src/modernize/runJscodeshiftScripts.js","../src/util/makeCommit.js","../src/convert.js","../src/land.js","../src/modernize/removeAutogeneratedHeader.js","../src/modernizeJS.js","../src/viewErrors.js","../src/cli.js"],"sourcesContent":["const PREFIX = 'bulk-decaffeinate CLIError: ';\n\n/**\n * Exception class for a nice-looking error.\n *\n * Apparently async/await propagation doesn't preserve the exception, so to work\n * around this, we put a special prefix at the start of CLI errors and format\n * the error without a stack trace if the message starts with that prefix.\n */\nexport default class CLIError extends Error {\n  constructor(message) {\n    super(PREFIX + message);\n  }\n\n  static formatError(e) {\n    if (!e) {\n      return e;\n    }\n    if (e.message.startsWith(PREFIX)) {\n      return e.message.substring(PREFIX.length);\n    } else {\n      return e;\n    }\n  }\n}\n","import { exists, readFile } from 'mz/fs';\n\nimport CLIError from '../util/CLIError';\n\n/**\n * Read a list of files from a file and return it. Verify that all files\n * actually exist.\n */\nexport default async function getFilesFromPathFile(filePath) {\n  let fileContents = await readFile(filePath);\n  let lines = fileContents.toString().split('\\n');\n  let resultLines = [];\n  for (let line of lines) {\n    line = line.trim();\n    if (line.length === 0 || line.startsWith('#')) {\n      continue;\n    }\n    if (!(await exists(line))) {\n      throw new CLIError(`The file \"${line}\" did not exist.`);\n    }\n    resultLines.push(line);\n  }\n  return resultLines;\n}\n","import { readdir, stat } from 'mz/fs';\nimport { join, resolve } from 'path';\n\n/**\n * Recursively discover any matching files in the current directory, ignoring\n * things like node_modules and .git.\n */\nexport default async function getFilesUnderPath(dirPath, asyncPathPredicate) {\n  let resultFiles = [];\n  let children = await readdir(dirPath);\n  for (let child of children) {\n    if (['node_modules', '.git'].includes(child)) {\n      continue;\n    }\n    let childPath = resolve(join(dirPath, child));\n    if ((await stat(childPath)).isDirectory()) {\n      let subdirCoffeeFiles = await getFilesUnderPath(childPath, asyncPathPredicate);\n      resultFiles.push(...subdirCoffeeFiles);\n    } else if (await asyncPathPredicate(childPath)) {\n      resultFiles.push(childPath);\n    }\n  }\n  return resultFiles;\n}\n","import git from 'simple-git/promise';\nimport { resolve } from 'path';\n\nexport default async function getTrackedFiles() {\n  let stdout = await git().raw(['ls-files']);\n  return new Set(stdout.split('\\n').map(s => s.trim()).map(s => resolve(s)));\n}\n","import executable from 'executable';\nimport { readFile } from 'mz/fs';\nimport { basename, dirname, extname, join } from 'path';\n\nexport const COFFEE_FILE_RECOGNIZER = {\n  extensions: ['.coffee', '.litcoffee', '.coffee.md'],\n  shebangSuffix: 'coffee',\n};\n\nexport const JS_FILE_RECOGNIZER = {\n  extensions: ['.js'],\n  shebangSuffix: 'node',\n};\n\nfunction extensionFor(path) {\n  if (path.endsWith('.coffee.md')) {\n    return '.coffee.md';\n  }\n  return extname(path);\n}\n\nfunction basePathFor(path) {\n  let extension = extensionFor(path);\n  return join(dirname(path), basename(path, extension));\n}\n\nexport async function shouldConvertFile(path, recognizer, trackedFiles) {\n  if (!hasRecognizedExtension(path, recognizer) &&\n      !await isExecutableScript(path, recognizer)) {\n    return false;\n  }\n  if (!trackedFiles.has(path)) {\n    console.log(\n      `Warning: Skipping ${path} because the file is not tracked in the git repo.`);\n    return false;\n  }\n  return true;\n}\n\nfunction hasRecognizedExtension(path, recognizer) {\n  return recognizer.extensions.some(ext =>\n    path.endsWith(ext) && !path.endsWith(`.original${ext}`));\n}\n\nasync function isExecutableScript(path, recognizer) {\n  if (isExtensionless(path) && await executable(path)) {\n    let contents = await readFile(path);\n    let firstLine = contents.toString().split('\\n')[0];\n    if (firstLine.startsWith('#!') && firstLine.includes(recognizer.shebangSuffix)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isExtensionless(path) {\n  return extensionFor(path) === '';\n}\n\nexport function backupPathFor(path) {\n  let extension = extensionFor(path);\n  let basePath = basePathFor(path);\n  return basePath + '.original' + extension;\n}\n\n/**\n * The resulting path where we should send the given input file. Note that when\n * the input file is an extensionless script, we prefer to keep it extensionless\n * (and decaffeinate handles the shebang line).\n */\nexport function jsPathFor(path, config) {\n  if (config.customNames[path]) {\n    return config.customNames[path];\n  }\n  if (isExtensionless(path)) {\n    return path;\n  } else {\n    return basePathFor(path) + '.' + config.outputFileExtension;\n  }\n}\n\n/**\n * The file generated by decaffeinate for the input file with this name.\n */\nexport function decaffeinateOutPathFor(path) {\n  return basePathFor(path) + '.js';\n}\n\nexport function isLiterate(path) {\n  return path.endsWith('.litcoffee') || path.endsWith('.coffee.md');\n}\n","import { exists } from 'mz/fs';\nimport { resolve } from 'path';\n\nimport getFilesFromPathFile from './getFilesFromPathFile';\nimport getFilesUnderPath from '../util/getFilesUnderPath';\nimport getTrackedFiles from '../util/getTrackedFiles';\nimport { shouldConvertFile, jsPathFor } from '../util/FilePaths';\nimport CLIError from '../util/CLIError';\n\n/**\n * Get the files that we should process based on the config. \"recognizer\" should\n * be an object describing the files to auto-recognize, e.g.\n * COFFEE_FILE_RECOGNIZER.\n */\nexport default async function getFilesToProcess(config, recognizer) {\n  let filesToProcess = await resolveFilesToProcess(config, recognizer);\n  filesToProcess = resolveFileFilter(filesToProcess, config);\n  await validateFilesToProcess(filesToProcess, config);\n  return filesToProcess;\n}\n\nasync function resolveFilesToProcess(config, recognizer) {\n  let {filesToProcess, pathFile, searchDirectory} = config;\n  if (!filesToProcess && !pathFile && !searchDirectory) {\n    let trackedFiles = await getTrackedFiles();\n    return await getFilesUnderPath('.', async (path) =>\n      await shouldConvertFile(path, recognizer, trackedFiles));\n  }\n  let files = [];\n  if (filesToProcess) {\n    files.push(...filesToProcess);\n  }\n  if (pathFile) {\n    files.push(...await getFilesFromPathFile(pathFile));\n  }\n  if (searchDirectory) {\n    let trackedFiles = await getTrackedFiles();\n    files.push(...await getFilesUnderPath(searchDirectory, async (path) =>\n      await shouldConvertFile(path, recognizer, trackedFiles)));\n  }\n  files = files.map(path => resolve(path));\n  files = Array.from(new Set(files)).sort();\n  return files;\n}\n\nfunction resolveFileFilter(filesToProcess, config) {\n  if (!config.fileFilterFn) {\n    return filesToProcess;\n  }\n  return filesToProcess.filter(path => config.fileFilterFn(path));\n}\n\nasync function validateFilesToProcess(filesToProcess, config) {\n  let trackedFiles = await getTrackedFiles();\n  for (let path of filesToProcess) {\n    if (!trackedFiles.has(path)) {\n      throw new CLIError(`The file ${path} is not tracked in the git repo.`);\n    }\n    let jsPath = jsPathFor(path, config);\n    if (jsPath !== path && await exists(jsPath)) {\n      throw new CLIError(`The file ${jsPath} already exists.`);\n    }\n  }\n}\n","import { exec } from 'mz/child_process';\n\nexport default function makeCLIFn(commandByPath) {\n  return async function(path) {\n    try {\n      await exec(commandByPath(path), {maxBuffer: 5 * 1024 * 1024});\n      return {path, error: null};\n    } catch (e) {\n      return {path, error: e.message};\n    }\n  };\n}\n","import { isLiterate } from '../util/FilePaths';\nimport makeCLIFn from './makeCLIFn';\n\nexport default function makeDecaffeinateVerifyFn(config) {\n  let { decaffeinatePath, decaffeinateArgs } = config;\n  return makeCLIFn(path => {\n    let literateFlag = isLiterate(path) ? '--literate' : '';\n    return `${decaffeinatePath} ${literateFlag} ${decaffeinateArgs.join(' ')} < ${path}`;\n  });\n}\n","/**\n * Run the given one-argument async function on an array of arguments, keeping a\n * logical worker pool to increase throughput without overloading the system.\n *\n * Results are provided as they come in with the result handler. Results look\n * like {index: 3, result: \"Hello\"}. This can be used e.g. to update a progress\n * bar.\n *\n * An array of all results is returned at the end.\n */\nexport default async function runInParallel(\n    args, asyncFn, numConcurrentProcesses, resultHandler) {\n  let results = [];\n  let activePromises = {};\n\n  let handleResult = ({index, result}) => {\n    results[index] = result;\n    delete activePromises[index];\n    resultHandler({index, result});\n  };\n\n  for (let i = 0; i < args.length; i++) {\n    let arg = args[i];\n    activePromises[i] = async function() {\n      return {\n        index: i,\n        result: await asyncFn(arg),\n      };\n    }();\n    if (Object.keys(activePromises).length >= numConcurrentProcesses) {\n      handleResult(await Promise.race(Object.values(activePromises)));\n    }\n  }\n  while (Object.keys(activePromises).length > 0) {\n    handleResult(await Promise.race(Object.values(activePromises)));\n  }\n  return results;\n}\n","export default function pluralize(num, noun) {\n  return num === 1 ? `${num} ${noun}` : `${num} ${noun}s`;\n}\n","/**\n * Copied from moment-precise-range, which is MIT-licensed, with minor cleanups\n * to appease ESLint and remove an unused option.\n *\n * https://github.com/codebox/moment-precise-range\n *\n * The original plugin worked by modifying the global moment installation, which\n * caused problems if multiple moment instances were installed, so this should\n * avoid that.\n */\n\nimport moment from 'moment';\n\nconst STRINGS = {\n  nodiff: '',\n  year: 'year',\n  years: 'years',\n  month: 'month',\n  months: 'months',\n  day: 'day',\n  days: 'days',\n  hour: 'hour',\n  hours: 'hours',\n  minute: 'minute',\n  minutes: 'minutes',\n  second: 'second',\n  seconds: 'seconds',\n  delimiter: ' ',\n};\n\nfunction pluralize(num, word) {\n  return num + ' ' + STRINGS[word + (num === 1 ? '' : 's')];\n}\n\nfunction buildStringFromValues(yDiff, mDiff, dDiff, hourDiff, minDiff, secDiff){\n  let result = [];\n\n  if (yDiff) {\n    result.push(pluralize(yDiff, 'year'));\n  }\n  if (mDiff) {\n    result.push(pluralize(mDiff, 'month'));\n  }\n  if (dDiff) {\n    result.push(pluralize(dDiff, 'day'));\n  }\n  if (hourDiff) {\n    result.push(pluralize(hourDiff, 'hour'));\n  }\n  if (minDiff) {\n    result.push(pluralize(minDiff, 'minute'));\n  }\n  if (secDiff) {\n    result.push(pluralize(secDiff, 'second'));\n  }\n\n  return result.join(STRINGS.delimiter);\n}\n\nexport default function momentPreciseDiff(m1, m2) {\n  m1.add(m2.utcOffset() - m1.utcOffset(), 'minutes'); // shift timezone of m1 to m2\n\n  if (m1.isSame(m2)) {\n    return STRINGS.nodiff;\n  }\n\n  if (m1.isAfter(m2)) {\n    let tmp = m1;\n    m1 = m2;\n    m2 = tmp;\n  }\n\n  let yDiff = m2.year() - m1.year();\n  let mDiff = m2.month() - m1.month();\n  let dDiff = m2.date() - m1.date();\n  let hourDiff = m2.hour() - m1.hour();\n  let minDiff = m2.minute() - m1.minute();\n  let secDiff = m2.second() - m1.second();\n\n  if (secDiff < 0) {\n    secDiff = 60 + secDiff;\n    minDiff--;\n  }\n  if (minDiff < 0) {\n    minDiff = 60 + minDiff;\n    hourDiff--;\n  }\n  if (hourDiff < 0) {\n    hourDiff = 24 + hourDiff;\n    dDiff--;\n  }\n  if (dDiff < 0) {\n    let daysInLastFullMonth = moment(m2.year() + '-' + (m2.month() + 1), 'YYYY-MM').subtract(1, 'M').daysInMonth();\n    if (daysInLastFullMonth < m1.date()) { // 31/01 -> 2/03\n      dDiff = daysInLastFullMonth + dDiff + (m1.date() - daysInLastFullMonth);\n    } else {\n      dDiff = daysInLastFullMonth + dDiff;\n    }\n    mDiff--;\n  }\n  if (mDiff < 0) {\n    mDiff = 12 + mDiff;\n    yDiff--;\n  }\n\n  return buildStringFromValues(yDiff, mDiff, dDiff, hourDiff, minDiff, secDiff);\n}\n","import moment from 'moment';\n\nimport runInParallel from './runInParallel';\nimport CLIError from '../util/CLIError';\nimport pluralize from '../util/pluralize';\nimport momentPreciseDiff from '../util/momentPreciseDiff';\n\n/**\n * Run the given command in parallel, showing a progress bar of results.\n *\n * The provided async function should return an object that at least contains\n * a field called \"error\" that is truthy if there was a problem, but may contain\n * any other fields.\n */\nexport default async function runWithProgressBar(\n    config, description, files, asyncFn, {runInSeries, allowFailures}={}) {\n  let numProcessed = 0;\n  let numFailures = 0;\n  let numTotal = files.length;\n  let startTime = moment();\n  let numConcurrentProcesses = runInSeries ? 1 : config.numWorkers;\n  console.log(`${description} (${pluralize(numConcurrentProcesses, 'worker')})`);\n  let results;\n  try {\n    results = await runInParallel(files, asyncFn, numConcurrentProcesses, ({result}) => {\n      if (result && result.error) {\n        if (!allowFailures) {\n          throw new CLIError(`Error:\\n${result.error}`);\n        }\n        numFailures++;\n      }\n      numProcessed++;\n      let errorString = numFailures === 0 ? '' : ` (${pluralize(numFailures, 'failure')} so far)`;\n      process.stdout.write(`\\r${numProcessed}/${numTotal}${errorString}`);\n    });\n  } finally {\n    process.stdout.write('\\n');\n    let endTime = moment();\n    let diffStr = momentPreciseDiff(startTime, endTime) || '0 seconds';\n    console.log(`Finished in ${diffStr} (Time: ${moment().format()})`);\n  }\n  return results;\n}\n","import { writeFile } from 'mz/fs';\n\nimport getFilesToProcess from './config/getFilesToProcess';\nimport makeDecaffeinateVerifyFn from './runner/makeDecaffeinateVerifyFn';\nimport runWithProgressBar from './runner/runWithProgressBar';\nimport { COFFEE_FILE_RECOGNIZER } from './util/FilePaths';\nimport pluralize from './util/pluralize';\n\nexport default async function check(config) {\n  let filesToProcess = await getFilesToProcess(config, COFFEE_FILE_RECOGNIZER);\n  let decaffeinateResults = await runWithProgressBar(\n    config,\n    `Doing a dry run of decaffeinate on ${pluralize(filesToProcess.length, 'file')}...`,\n    filesToProcess, makeDecaffeinateVerifyFn(config),\n    {allowFailures: true});\n  await printResults(decaffeinateResults);\n}\n\nasync function printResults(results) {\n  let errorResults = results.filter(r => r.error !== null);\n  if (errorResults.length === 0) {\n    console.log(`All checks succeeded! decaffeinate can convert all ${pluralize(results.length, 'file')}.`);\n    console.log('Run \"bulk-decaffeinate convert\" to convert the files to JavaScript.');\n  } else {\n    console.log(`${pluralize(errorResults.length, 'file')} failed to convert:`);\n    for (let result of errorResults) {\n      console.log(result.path);\n    }\n    let successPaths = results.filter(r => r.error === null).map(r => r.path);\n    console.log();\n    await writeFile('decaffeinate-errors.log', getVerboseErrors(results));\n    await writeFile('decaffeinate-results.json', JSON.stringify(results, null, 2));\n    await writeFile('decaffeinate-successful-files.txt', successPaths.join('\\n'));\n    console.log('Wrote decaffeinate-errors.log and decaffeinate-results.json with more detailed info.');\n    console.log('To open failures in the online repl, run \"bulk-decaffeinate view-errors\".');\n    console.log('To convert the successful files, run \"bulk-decaffeinate convert -p decaffeinate-successful-files.txt\".');\n  }\n}\n\nfunction getVerboseErrors(results) {\n  let errorMessages = [];\n  for (let {path, error} of results) {\n    if (error) {\n      errorMessages.push(`===== ${path}`);\n      errorMessages.push(getStdout(error));\n    }\n  }\n  return errorMessages.join('\\n');\n}\n\nfunction getStdout(message) {\n  let matchString = '\\nstdin: ';\n  if (message.indexOf(matchString) !== -1) {\n    return message.substring(message.indexOf(matchString) + matchString.length);\n  } else {\n    return message.substring(message.indexOf('\\n') + 1);\n  }\n}\n","import { unlink } from 'mz/fs';\nimport { basename } from 'path';\n\nimport getFilesUnderPath from './util/getFilesUnderPath';\n\nexport default async function clean() {\n  let filesToDelete = await getFilesUnderPath('.', p => basename(p).includes('.original'));\n  if (filesToDelete.length === 0) {\n    console.log('No .original files were found.');\n    return;\n  }\n  for (let path of filesToDelete) {\n    console.log(`Deleting ${path}`);\n    await unlink(path);\n  }\n  console.log('Done deleting .original files.');\n}\n","import { spawn } from 'child_process';\n\n/**\n * Variant of exec that connects stdout, stderr, and stdin, mostly so console\n * output is shown continuously. As with the mz version of exec, this returns a\n * promise that resolves when the shell command finishes.\n */\nexport default function execLive(command) {\n  return new Promise((resolve, reject) => {\n    let childProcess = spawn('/bin/sh', ['-c', command], {stdio: 'inherit'});\n    childProcess.on('close', code => {\n      if (code === 0) {\n        resolve();\n      } else {\n        reject();\n      }\n    });\n  });\n}\n","import { exec } from 'mz/child_process';\nimport { exists, readdir, stat } from 'mz/fs';\nimport readline from 'mz/readline';\nimport { resolve } from 'path';\nimport requireUncached from 'require-uncached';\n\nimport CLIError from '../util/CLIError';\nimport execLive from '../util/execLive';\n\n/**\n * Resolve the configuration from a number of sources: any number of config\n * files and CLI options. Then \"canonicalize\" the config as much as we can.\n */\nexport default async function resolveConfig(commander, {needsJscodeshift, needsEslint} = {}) {\n  let config = {};\n\n  if (commander.config && commander.config.length > 0) {\n    for (let filename of commander.config) {\n      config = applyConfig(filename, config);\n    }\n  } else {\n    let currentDirFiles = await readdir('.');\n    currentDirFiles.sort();\n    for (let filename of currentDirFiles) {\n      config = await applyPossibleConfig(filename, config);\n    }\n  }\n  config = getCLIParamsConfig(config, commander);\n  return {\n    decaffeinateArgs: resolveDecaffeinateArgs(config),\n    filesToProcess: config.filesToProcess,\n    pathFile: config.pathFile,\n    searchDirectory: config.searchDirectory,\n    fileFilterFn: config.fileFilterFn,\n    customNames: resolveCustomNames(config.customNames),\n    outputFileExtension: config.outputFileExtension || 'js',\n    fixImportsConfig: resolveFixImportsConfig(config),\n    jscodeshiftScripts: config.jscodeshiftScripts,\n    landConfig: config.landConfig,\n    mochaEnvFilePattern: config.mochaEnvFilePattern,\n    codePrefix: config.codePrefix,\n    landBase: config.landBase,\n    numWorkers: config.numWorkers || 8,\n    skipVerify: config.skipVerify,\n    skipEslintFix: config.skipEslintFix,\n    decaffeinatePath: await resolveDecaffeinatePath(config),\n    jscodeshiftPath: needsJscodeshift ? await resolveJscodeshiftPath(config) : null,\n    eslintPath: needsEslint ? await resolveEslintPath(config) : null,\n  };\n}\n\nfunction resolveDecaffeinateArgs(config) {\n  let args = config.decaffeinateArgs || [];\n  if (config.useJSModules && !args.includes('--use-js-modules')) {\n    args.push('--use-js-modules');\n  }\n  return args;\n}\n\nfunction resolveFixImportsConfig(config) {\n  let fixImportsConfig = config.fixImportsConfig;\n  if (!fixImportsConfig && config.useJSModules) {\n    fixImportsConfig = {\n      searchPath: '.',\n    };\n  }\n  return fixImportsConfig;\n}\n\nasync function applyPossibleConfig(filename, config) {\n  if (!filename.startsWith('bulk-decaffeinate') ||\n      (await stat(filename)).isDirectory()) {\n    return config;\n  }\n\n  if (filename.endsWith('.config.js')) {\n    return applyConfig(filename, config);\n  } else {\n    return config;\n  }\n}\n\nfunction applyConfig(filename, config) {\n  let filePath = resolve(filename);\n  try {\n    let newConfig = requireUncached(filePath);\n    return Object.assign(config, newConfig);\n  } catch (e) {\n    throw new CLIError(\n      `Error reading file ${filePath}. Make sure it is a valid JS file.`);\n  }\n}\n\n/**\n * Fill in a configuration from the CLI arguments.\n */\nfunction getCLIParamsConfig(config, commander) {\n  let {\n    file,\n    pathFile,\n    dir,\n    useJsModules,\n    landBase,\n    numWorkers,\n    skipVerify,\n    decaffeinatePath,\n    jscodeshiftPath,\n    eslintPath,\n  } = commander;\n  // As a special case, specifying files to process from the CLI should cause\n  // any equivalent config file settings to be ignored.\n  if ((file && file.length > 0) || dir || pathFile) {\n    config.filesToProcess = null;\n    config.searchDirectory = null;\n    config.pathFile = null;\n  }\n\n  if (file && file.length > 0) {\n    config.filesToProcess = file;\n  }\n  if (dir) {\n    config.searchDirectory = dir;\n  }\n  if (pathFile) {\n    config.pathFile = pathFile;\n  }\n  if (useJsModules) {\n    config.useJSModules = true;\n  }\n  if (landBase) {\n    config.landBase = landBase;\n  }\n  if (numWorkers) {\n    config.numWorkers = numWorkers;\n  }\n  if (skipVerify) {\n    config.skipVerify = true;\n  }\n  if (decaffeinatePath) {\n    config.decaffeinatePath = decaffeinatePath;\n  }\n  if (jscodeshiftPath) {\n    config.jscodeshiftPath = jscodeshiftPath;\n  }\n  if (eslintPath) {\n    config.eslintPath = eslintPath;\n  }\n  return config;\n}\n\nasync function resolveDecaffeinatePath(config) {\n  if (config.decaffeinatePath) {\n    return config.decaffeinatePath;\n  }\n  return await resolveBinary('decaffeinate');\n}\n\nasync function resolveJscodeshiftPath(config) {\n  // jscodeshift is an optional step, so don't prompt to install it if we won't\n  // be using it.\n  if (!config.jscodeshiftScripts && !config.fixImportsConfig && !config.useJSModules) {\n    return null;\n  }\n  if (config.jscodeshiftPath) {\n    return config.jscodeshiftPath;\n  }\n  return await resolveBinary('jscodeshift');\n}\n\nasync function resolveEslintPath(config) {\n  if (config.skipEslintFix) {\n    return null;\n  }\n  if (config.eslintPath) {\n    return config.eslintPath;\n  }\n  return await resolveBinary('eslint');\n}\n\n/**\n * Determine the shell command that can be used to run the given binary,\n * prompting to globally install it if necessary.\n */\nasync function resolveBinary(binaryName) {\n  let nodeModulesPath = `./node_modules/.bin/${binaryName}`;\n  if (await exists(nodeModulesPath)) {\n    return nodeModulesPath;\n  } else {\n    try {\n      await exec(`which ${binaryName}`);\n      return binaryName;\n    } catch (e) {\n      console.log(`${binaryName} binary not found on the PATH or in node_modules.`);\n      let rl = readline.createInterface(process.stdin, process.stdout);\n      let answer = await rl.question(`Run \"npm install -g ${binaryName}\"? [Y/n] `);\n      rl.close();\n      if (answer.toLowerCase().startsWith('n')) {\n        throw new CLIError(`${binaryName} must be installed.`);\n      }\n      console.log(`Installing ${binaryName} globally...`);\n      await execLive(`npm install -g ${binaryName}`);\n      console.log(`Successfully installed ${binaryName}\\n`);\n      return binaryName;\n    }\n  }\n}\n\nfunction resolveCustomNames(customNames) {\n  let result = {};\n  if (customNames) {\n    for (const [key, value] of Object.entries(customNames)) {\n      result[resolve(key)] = resolve(value);\n    }\n  }\n  return result;\n}\n","import { readFile, writeFile } from 'fs-promise';\n\nexport default async function prependToFile(path, prependText) {\n  let contents = await readFile(path);\n  let lines = contents.toString().split('\\n');\n  if (lines[0] && lines[0].startsWith('#!')) {\n    contents = lines[0] + '\\n' + prependText + lines.slice(1).join('\\n');\n  } else {\n    contents = prependText + contents;\n  }\n  await writeFile(path, contents);\n}\n","import prependToFile from '../util/prependToFile';\nimport runWithProgressBar from '../runner/runWithProgressBar';\n\nexport default async function prependCodePrefix(config, jsFiles, codePrefix) {\n  await runWithProgressBar(\n    config,\n    'Adding code prefix to converted files...', jsFiles, async function(path) {\n      await prependToFile(path, codePrefix);\n      return {error: null};\n    });\n}\n","import runWithProgressBar from '../runner/runWithProgressBar';\nimport prependToFile from '../util/prependToFile';\n\nexport default async function prependMochaEnv(config, jsFiles, mochaEnvFilePattern) {\n  let regex = new RegExp(mochaEnvFilePattern);\n  let testFiles = jsFiles.filter(f => regex.test(f));\n  await runWithProgressBar(\n    config,\n    'Adding /* eslint-env mocha */ to test files...', testFiles, async function(path) {\n      await prependToFile(path, '/* eslint-env mocha */\\n');\n      return {error: null};\n    });\n}\n","import { exec } from 'mz/child_process';\n\nimport runWithProgressBar from '../runner/runWithProgressBar';\nimport CLIError from '../util/CLIError';\nimport prependToFile from '../util/prependToFile';\n\nexport default async function runEslintFix(jsFiles, config, {isUpdate}) {\n  let eslintResults = await runWithProgressBar(\n    config,\n    'Running eslint --fix on all files...', jsFiles, makeEslintFixFn(config, {isUpdate}));\n  for (let result of eslintResults) {\n    for (let message of result.messages) {\n      console.log(message);\n    }\n  }\n}\n\nexport const HEADER_COMMENT_LINES = {\n  todo: '// TODO: This file was created by bulk-decaffeinate.',\n  todoUpdated: '// TODO: This file was updated by bulk-decaffeinate.',\n  fixIssues: '// Fix any style issues and re-enable lint.',\n  sanityCheck: '// Sanity-check the conversion and remove this comment.',\n};\n\nfunction makeEslintFixFn(config, {isUpdate}) {\n  return async function runEslint(path) {\n    let messages = [];\n\n    // Ignore the eslint exit code; it gives useful stdout in the same format\n    // regardless of the exit code. Also keep a 10MB buffer since sometimes\n    // there can be a LOT of lint failures.\n    let [eslintStdout, eslintStderr] = (await exec(\n      `${config.eslintPath} --fix --format json ${path}; :`,\n      {maxBuffer: 10000*1024}));\n\n    let ruleIds;\n    if ((eslintStdout + eslintStderr).includes(\"ESLint couldn't find a configuration file\")) {\n      messages.push(`Skipping \"eslint --fix\" on ${path} because there was no eslint config file.`);\n      ruleIds = [];\n    } else {\n      let eslintOutput;\n      try {\n        eslintOutput = JSON.parse(eslintStdout);\n      } catch (e) {\n        throw new CLIError(`Error while running eslint:\\n${eslintStdout}\\n${eslintStderr}`);\n      }\n      ruleIds = eslintOutput[0].messages\n        .map(message => message.ruleId).filter(ruleId => ruleId);\n      ruleIds = Array.from(new Set(ruleIds)).sort();\n    }\n\n    if (isUpdate) {\n      // When we're just updating a JS file, a TODO is useful if there's real\n      // stuff to fix.\n      if (ruleIds.length > 0) {\n        await prependToFile(\n          `${path}`, `${HEADER_COMMENT_LINES.todoUpdated}\\n${HEADER_COMMENT_LINES.fixIssues}\\n`);\n      }\n    } else {\n      // If we generated the whole file from CoffeeScript, always leave a\n      // suggestion to clean up the file.\n      if (ruleIds.length > 0) {\n        await prependToFile(\n          `${path}`, `${HEADER_COMMENT_LINES.todo}\\n${HEADER_COMMENT_LINES.fixIssues}\\n`);\n      } else {\n        await prependToFile(\n          `${path}`, `${HEADER_COMMENT_LINES.todo}\\n${HEADER_COMMENT_LINES.sanityCheck}\\n`);\n      }\n    }\n    if (ruleIds.length > 0) {\n      await prependToFile(`${path}`, `\\\n/* eslint-disable\n${ruleIds.map(ruleId => `    ${ruleId},`).join('\\n')}\n*/\n`);\n    }\n    return {error: null, messages};\n  };\n}\n","/**\n * Runs the fix-imports step on all specified JS files, and return an array of\n * the files that changed.\n */\nimport { readFile } from 'fs-promise';\nimport { basename, join, relative, resolve } from 'path';\nimport zlib from 'zlib';\n\nimport runWithProgressBar from '../runner/runWithProgressBar';\nimport execLive from '../util/execLive';\nimport getFilesUnderPath from '../util/getFilesUnderPath';\n\nexport default async function runFixImports(jsFiles, config) {\n  let {searchPath, absoluteImportPaths} = config.fixImportsConfig;\n  if (!absoluteImportPaths) {\n    absoluteImportPaths = [];\n  }\n  let scriptPath = join(__dirname, '../jscodeshift-scripts-dist/fix-imports.js');\n\n  let options = {\n    convertedFiles: jsFiles.map(p => resolve(p)),\n    absoluteImportPaths: absoluteImportPaths.map(p => resolve(p)),\n  };\n  let eligibleFixImportsFiles = await getEligibleFixImportsFiles(\n    config, searchPath, jsFiles);\n  console.log('Fixing any imports across the whole codebase...');\n  if (eligibleFixImportsFiles.length > 0) {\n    // Note that the args can get really long, so we take reasonable steps to\n    // reduce the chance of hitting the system limit on arg length\n    // (256K by default on Mac).\n    let eligibleRelativePaths = eligibleFixImportsFiles.map(p => relative('', p));\n    let encodedOptions = zlib.deflateSync(JSON.stringify(options)).toString('base64');\n    await execLive(`\\\n      ${config.jscodeshiftPath} --parser flow -t ${scriptPath} \\\n        ${eligibleRelativePaths.join(' ')} --encoded-options=${encodedOptions}`);\n  }\n  return eligibleFixImportsFiles;\n}\n\nasync function getEligibleFixImportsFiles(config, searchPath, jsFiles) {\n  let jsBasenames = jsFiles.map(p => basename(p, '.js'));\n  let resolvedPaths = jsFiles.map(p => resolve(p));\n  let allJsFiles = await getFilesUnderPath(searchPath, p => p.endsWith('.js'));\n  await runWithProgressBar(\n    config,\n    'Searching for files that may need to have updated imports...',\n    allJsFiles,\n    async function(p) {\n      let resolvedPath = resolve(p);\n      if (resolvedPaths.includes(resolvedPath)) {\n        return {error: null};\n      }\n      let contents = (await readFile(resolvedPath)).toString();\n      for (let jsBasename of jsBasenames) {\n        if (contents.includes(jsBasename)) {\n          resolvedPaths.push(resolvedPath);\n          return {error: null};\n        }\n      }\n      return {error: null};\n    });\n  return resolvedPaths;\n}\n","import { join, relative } from 'path';\n\nimport execLive from '../util/execLive';\n\nexport default async function runJscodeshiftScripts(jsFiles, config) {\n  for (let scriptPath of config.jscodeshiftScripts) {\n    let resolvedPath = resolveJscodeshiftScriptPath(scriptPath);\n    console.log(`Running jscodeshift script ${resolvedPath}...`);\n    await execLive(`${config.jscodeshiftPath} --parser flow \\\n      -t ${resolvedPath} ${jsFiles.map(p => relative('', p)).join(' ')}`);\n  }\n}\n\nfunction resolveJscodeshiftScriptPath(scriptPath) {\n  if ([\n      'prefer-function-declarations.js',\n      'remove-coffee-from-imports.js',\n      'top-level-this-to-exports.js',\n    ].includes(scriptPath)) {\n    return join(__dirname, `../jscodeshift-scripts-dist/${scriptPath}`);\n  }\n  return scriptPath;\n}\n","import git from 'simple-git/promise';\n\n/**\n * Make an autogenerated commit with the \"decaffeinate\" author.\n */\nexport default async function makeCommit(commitMessage) {\n  const userEmail = await git().raw(['config', 'user.email']);\n  const author = `decaffeinate <${userEmail}>`;\n  await git().commit(commitMessage, {'--author': author, '--no-verify': null});\n}\n","import { copy, move, unlink } from 'fs-promise';\nimport { basename } from 'path';\nimport git from 'simple-git/promise';\n\nimport getFilesToProcess from './config/getFilesToProcess';\nimport prependCodePrefix from './modernize/prependCodePrefix';\nimport prependMochaEnv from './modernize/prependMochaEnv';\nimport runEslintFix from './modernize/runEslintFix';\nimport runFixImports from './modernize/runFixImports';\nimport runJscodeshiftScripts from './modernize/runJscodeshiftScripts';\nimport makeCLIFn from './runner/makeCLIFn';\nimport makeDecaffeinateVerifyFn from './runner/makeDecaffeinateVerifyFn';\nimport runWithProgressBar from './runner/runWithProgressBar';\nimport CLIError from './util/CLIError';\nimport {\n  backupPathFor,\n  COFFEE_FILE_RECOGNIZER,\n  decaffeinateOutPathFor,\n  jsPathFor,\n} from './util/FilePaths';\nimport makeCommit from './util/makeCommit';\nimport pluralize from './util/pluralize';\n\nexport default async function convert(config) {\n  await assertGitWorktreeClean();\n\n  let coffeeFiles = await getFilesToProcess(config, COFFEE_FILE_RECOGNIZER);\n  if (coffeeFiles.length === 0) {\n    console.log('There were no CoffeeScript files to convert.');\n    return;\n  }\n\n  let movingCoffeeFiles = coffeeFiles.filter(p => jsPathFor(p, config) !== p);\n  let {decaffeinateArgs = [], decaffeinatePath} = config;\n\n  if (!config.skipVerify) {\n    try {\n      await runWithProgressBar(\n        config,\n        'Verifying that decaffeinate can successfully convert these files...',\n        coffeeFiles, makeDecaffeinateVerifyFn(config));\n    } catch (e) {\n      throw new CLIError(`\\\nSome files could not be converted with decaffeinate.\nRe-run with the \"check\" command for more details.`);\n    }\n  }\n\n  await runWithProgressBar(\n    config,\n    'Backing up files to .original.coffee...',\n    coffeeFiles,\n    async function(coffeePath) {\n      await copy(`${coffeePath}`, `${backupPathFor(coffeePath)}`);\n    });\n\n  await runWithProgressBar(\n    config,\n    `Renaming files from .coffee to .${config.outputFileExtension}...`,\n    movingCoffeeFiles,\n    async function(coffeePath) {\n      await move(coffeePath, jsPathFor(coffeePath, config));\n    });\n\n  let shortDescription = getShortDescription(coffeeFiles);\n  let renameCommitMsg =\n    `decaffeinate: Rename ${shortDescription} from .coffee to .${config.outputFileExtension}`;\n\n  if (movingCoffeeFiles.length > 0) {\n    console.log(`Generating the first commit: \"${renameCommitMsg}\"...`);\n    await git().rm(movingCoffeeFiles);\n    await git().raw(['add', '-f', ...movingCoffeeFiles.map(p => jsPathFor(p, config))]);\n    await makeCommit(renameCommitMsg);\n  }\n\n  await runWithProgressBar(\n    config,\n    'Moving files back...',\n    movingCoffeeFiles,\n    async function(coffeePath) {\n      await move(jsPathFor(coffeePath, config), coffeePath);\n    });\n\n  await runWithProgressBar(\n    config,\n    'Running decaffeinate on all files...',\n    coffeeFiles,\n    makeCLIFn(path => `${decaffeinatePath} ${decaffeinateArgs.join(' ')} ${path}`)\n  );\n\n  await runWithProgressBar(\n    config,\n    'Deleting old files...',\n    coffeeFiles,\n    async function(coffeePath) {\n      await unlink(coffeePath);\n    });\n\n  await runWithProgressBar(\n    config,\n    'Setting proper extension for all files...',\n    coffeeFiles,\n    async function(coffeePath) {\n      let decaffeinateOutPath = decaffeinateOutPathFor(coffeePath);\n      let jsPath = jsPathFor(coffeePath, config);\n      if (decaffeinateOutPath !== jsPath) {\n        await move(decaffeinateOutPath, jsPath);\n      }\n    });\n\n  let decaffeinateCommitMsg =\n    `decaffeinate: Convert ${shortDescription} to JS`;\n  console.log(`Generating the second commit: ${decaffeinateCommitMsg}...`);\n  let jsFiles = coffeeFiles.map(f => jsPathFor(f, config));\n  await git().raw(['add', '-f', ...jsFiles]);\n  await makeCommit(decaffeinateCommitMsg);\n\n  if (config.jscodeshiftScripts) {\n    await runJscodeshiftScripts(jsFiles, config);\n  }\n  if (config.mochaEnvFilePattern) {\n    await prependMochaEnv(config, jsFiles, config.mochaEnvFilePattern);\n  }\n  let thirdCommitModifiedFiles = jsFiles.slice();\n  if (config.fixImportsConfig) {\n    thirdCommitModifiedFiles = await runFixImports(jsFiles, config);\n  }\n  if (!config.skipEslintFix) {\n    await runEslintFix(jsFiles, config, {isUpdate: false});\n  }\n  if (config.codePrefix) {\n    await prependCodePrefix(config, jsFiles, config.codePrefix);\n  }\n\n  let postProcessCommitMsg =\n    `decaffeinate: Run post-processing cleanups on ${shortDescription}`;\n  console.log(`Generating the third commit: ${postProcessCommitMsg}...`);\n  await git().raw(['add', '-f', ...thirdCommitModifiedFiles]);\n  await makeCommit(postProcessCommitMsg);\n\n  console.log(`Successfully ran decaffeinate on ${pluralize(coffeeFiles.length, 'file')}.`);\n  console.log('You should now fix lint issues in any affected files.');\n  console.log('All CoffeeScript files were backed up as .original.coffee files that you can use for comparison.');\n  console.log('You can run \"bulk-decaffeinate clean\" to remove those files.');\n  console.log('To allow git to properly track file history, you should NOT squash the generated commits together.');\n}\n\nasync function assertGitWorktreeClean() {\n  let status = await git().status();\n  if (status.files.length > status.not_added.length) {\n    throw new CLIError(`\\\nYou have modifications to your git worktree.\nPlease revert or commit them before running convert.`);\n  } else if (status.not_added.length > 0) {\n    console.log(`\\\nWarning: the following untracked files are present in your repository:\n${status.not_added.join('\\n')}\nProceeding anyway.\n`);\n  }\n}\n\nfunction getShortDescription(coffeeFiles) {\n  let firstFile = basename(coffeeFiles[0]);\n  if (coffeeFiles.length === 1) {\n    return firstFile;\n  } else {\n    return `${firstFile} and ${pluralize(coffeeFiles.length - 1, 'other file')}`;\n  }\n}\n","import { exec } from 'mz/child_process';\nimport git from 'simple-git/promise';\n\nimport CLIError from './util/CLIError';\n\n/**\n * The land option \"packages\" a set of commits into a single merge commit that\n * can be pushed. Splitting the decaffeinate work up into different commits\n * allows git to properly track file history when a file is changed from\n * CoffeeScript to JavaScript.\n *\n * A typical use case is that the merge commit will include 4 commits: the three\n * auto-generated decaffeinate commits and a follow-up commit to fix lint\n * errors. Unlike the auto-generated decaffeinate commits, the merge commit is\n * created with the default author name.\n */\nexport default async function land(config) {\n  let remote = config.landConfig && config.landConfig.remote;\n  let upstreamBranch = config.landConfig && config.landConfig.upstreamBranch;\n  let phabricatorAware = config.landConfig && config.landConfig.phabricatorAware;\n  if (!remote) {\n    console.log('No remote was specified. Defaulting to origin.');\n    remote = 'origin';\n  }\n  if (!upstreamBranch) {\n    console.log('No upstreamBranch was specified. Defaulting to master.');\n    upstreamBranch = 'master';\n  }\n  let remoteBranch = `${remote}/${upstreamBranch}`;\n  console.log(`Running fetch for ${remote}.`);\n  await git().fetch([remote]);\n\n  let commits = await getCommits(config);\n  console.log(`Found ${commits.length} commits to use.`);\n\n  let differentialRevisionLine = phabricatorAware ? await getDifferentialRevisionLine(commits) : null;\n\n  await git().checkout(remoteBranch);\n  for (let commit of commits) {\n    console.log(`Cherry-picking \"${commit.message}\"`);\n    await git().raw(['cherry-pick', commit.hash]);\n    let status = await git().status();\n    if (status.conflicted.length > 0) {\n      throw new CLIError(`\\\nThe cherry pick had conflicts.\nPlease rebase your changes and retry \"bulk-decaffeinate land\"`);\n    }\n    let message = await getCommitMessage(commit.hash);\n    if (phabricatorAware) {\n      if (!message.includes('Differential Revision')) {\n        message += `\\n\\n${differentialRevisionLine}`;\n        await git().commit(message, ['--amend']);\n      }\n    }\n  }\n\n  console.log(`Creating merge commit on ${remoteBranch}`);\n  let cherryPickHeadCommit = (await git().revparse(['HEAD'])).trim();\n  await git().checkout(remoteBranch);\n\n  let mergeMessage = `Merge decaffeinate changes into ${remoteBranch}`;\n  if (phabricatorAware) {\n    mergeMessage += `\\n\\n${differentialRevisionLine}`;\n  }\n  await git().mergeFromTo(cherryPickHeadCommit, 'HEAD', ['--no-ff']);\n  await git().commit(mergeMessage, ['--amend']);\n  if (phabricatorAware) {\n    console.log('Pulling commit message from Phabricator.');\n    await exec('arc amend');\n  }\n  console.log('');\n  console.log('Done. Please verify that the git history looks right.');\n  console.log('You can push your changes with a command like this:');\n  console.log(`git push ${remote} HEAD:${upstreamBranch}`);\n  console.log('If you get a conflict, you should re-run \"bulk-decaffeinate land\".');\n}\n\nasync function getCommits(config) {\n  let explicitBase = null;\n  if (config.landBase) {\n    explicitBase = (await git().revparse([config.landBase])).trim();\n  }\n\n  let allCommits;\n  try {\n    allCommits = (await git().log({from: 'HEAD', to: 'HEAD~20'})).all;\n  } catch (e) {\n    allCommits = (await git().log({from: 'HEAD'})).all;\n  }\n\n  let commits = [];\n  let hasSeenDecaffeinateCommit = false;\n\n  for (let commit of allCommits) {\n    let isDecaffeinateCommit = commit.author_name === 'decaffeinate';\n    if (explicitBase !== null) {\n      if (explicitBase === commit.hash) {\n        return commits;\n      }\n    } else {\n      if (hasSeenDecaffeinateCommit && !isDecaffeinateCommit) {\n        return commits;\n      }\n    }\n    if (!hasSeenDecaffeinateCommit && isDecaffeinateCommit) {\n      hasSeenDecaffeinateCommit = true;\n    }\n    commits.unshift(commit);\n  }\n  throw new CLIError(`\\\nSearched 20 commits without finding a set of commits to use. Make sure you have\ncommits with the \"decaffeinate\" author in your recent git history, and that the\nfirst of those commits is the first commit that you would like to land.`);\n}\n\nasync function getDifferentialRevisionLine(commits) {\n  let resultLine = null;\n  for (let commit of commits) {\n    let commitMessage = await getCommitMessage(commit.hash);\n    for (let line of commitMessage.split('\\n')) {\n      if (line.startsWith('Differential Revision')) {\n        if (resultLine === null || resultLine === line) {\n          resultLine = line;\n        } else {\n          throw new CLIError(`\\\nFound multiple different \"Differential Revision\" lines in the matched commits.\nPlease set your git HEAD so that only one Phabricator code review is included.`);\n        }\n      }\n    }\n  }\n  if (resultLine === null) {\n    throw new CLIError(`\nExpected to find a \"Differential Revision\" line in at least one commit.`);\n  }\n  return resultLine;\n}\n\nasync function getCommitMessage(commitHash) {\n  return await git().show(['-s', '--format=%B', commitHash]);\n}\n","import { readFile, writeFile } from 'fs-promise';\n\nimport runWithProgressBar from '../runner/runWithProgressBar';\nimport { HEADER_COMMENT_LINES } from './runEslintFix';\n\nexport default async function removeAutogeneratedHeader(config, jsFiles) {\n  await runWithProgressBar(\n    config,\n    'Removing any existing autogenerated headers...',\n    jsFiles,\n    removeHeadersFromFile);\n}\n\nasync function removeHeadersFromFile(path) {\n  let contents = await readFile(path);\n  let newContents = removeHeadersFromCode(contents);\n  if (newContents !== contents) {\n    await writeFile(path, newContents);\n  }\n}\n\nexport function removeHeadersFromCode(code) {\n  let lines = code.toString().split('\\n');\n\n  let resultLines = [];\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    // Remove lines exactly matching a line we auto-generate.\n    if (Object.values(HEADER_COMMENT_LINES).includes(line)) {\n      continue;\n    }\n\n    // Remove regions of lines exactly matching our eslint-disable format.\n    if (line === '/* eslint-disable') {\n      let j = i + 1;\n      let foundMatch = false;\n      while (j < lines.length) {\n        if (lines[j] === '*/') {\n          foundMatch = true;\n          break;\n        }\n        if (!lines[j].startsWith('    ') || !lines[j].endsWith(',')) {\n          break;\n        }\n        j++;\n      }\n      if (foundMatch) {\n        // Skip forward to j, the \"*/\" line, so the next considered line will be\n        // the one after.\n        i = j;\n        continue;\n      }\n    }\n\n    // Everything else gets added to the file.\n    resultLines.push(line);\n  }\n  return resultLines.join('\\n');\n}\n","import getFilesToProcess from './config/getFilesToProcess';\nimport removeAutogeneratedHeader from './modernize/removeAutogeneratedHeader';\nimport runEslintFix from './modernize/runEslintFix';\nimport runFixImports from './modernize/runFixImports';\nimport runJscodeshiftScripts from './modernize/runJscodeshiftScripts';\nimport makeCLIFn from './runner/makeCLIFn';\nimport runWithProgressBar from './runner/runWithProgressBar';\nimport { JS_FILE_RECOGNIZER } from './util/FilePaths';\nimport pluralize from './util/pluralize';\n\nexport default async function modernizeJS(config) {\n  let {decaffeinateArgs = [], decaffeinatePath} = config;\n\n  let jsFiles = await getFilesToProcess(config, JS_FILE_RECOGNIZER);\n  if (jsFiles.length === 0) {\n    console.log('There were no JavaScript files to convert.');\n    return;\n  }\n\n  await removeAutogeneratedHeader(config, jsFiles);\n  await runWithProgressBar(\n    config,\n    'Running decaffeinate --modernize-js on all files...',\n    jsFiles,\n    makeCLIFn(path => `${decaffeinatePath} --modernize-js ${decaffeinateArgs.join(' ')} ${path}`)\n  );\n  if (config.jscodeshiftScripts) {\n    await runJscodeshiftScripts(jsFiles, config);\n  }\n  if (config.fixImportsConfig) {\n    await runFixImports(jsFiles, config);\n  }\n  if (!config.skipEslintFix) {\n    await runEslintFix(jsFiles, config, {isUpdate: true});\n  }\n\n  console.log(`Successfully modernized ${pluralize(jsFiles.length, 'file')}.`);\n  console.log('You should now fix lint issues in any affected files.');\n}\n","import { exists, readFile } from 'mz/fs';\nimport readline from 'mz/readline';\nimport opn from 'opn';\n\nexport default async function viewErrors() {\n  if (!(await exists('decaffeinate-results.json'))) {\n    console.log(\n      'decaffeinate-results.json file not found. Please run the \"check\" command first.');\n    return;\n  }\n\n  let resultsJson = await readFile('decaffeinate-results.json');\n  let results = JSON.parse(resultsJson);\n  let filesToOpen = results.filter(r => r.error !== null).map(r => r.path);\n  if (filesToOpen.length === 0) {\n    console.log('No failures were found!');\n    return;\n  }\n\n  if (filesToOpen.length > 10) {\n    let rl = readline.createInterface(process.stdin, process.stdout);\n    let answer = await rl.question(\n      `This will open ${filesToOpen.length} browser tabs. Do you want to proceed? [y/N] `);\n    rl.close();\n    if (!answer.toLowerCase().startsWith('y')) {\n      return;\n    }\n  }\n  for (let path of filesToOpen) {\n    await openInRepl(path);\n  }\n}\n\nasync function openInRepl(path) {\n  let fileContents = await readFile(path);\n  let encodedFile = encodeURIComponent(fileContents);\n  let url = `http://decaffeinate-project.org/repl/#?evaluate=false&stage=full&code=${encodedFile}`;\n  await opn(url, {wait: false});\n}\n","import 'babel-polyfill';\nimport commander from 'commander';\n\nimport check from './check';\nimport clean from './clean';\nimport resolveConfig from './config/resolveConfig';\nimport convert from './convert';\nimport land from './land';\nimport modernizeJS from './modernizeJS';\nimport CLIError from './util/CLIError';\nimport viewErrors from './viewErrors';\n\nexport default function () {\n  let command = null;\n  commander\n    .arguments('<command>')\n    .description(`Run decaffeinate on a set of files.\n\n  Commands:\n    check: Try decaffeinate on the specified files and generate a report of which files can be\n           converted. By default, all .coffee files in the current directory are used.\n    convert: Run decaffeinate on the specified files and generate git commits for the transition.\n    view-errors: Open failures from the most recent run in an online repl.\n    clean: Delete all files ending with .original.coffee in the current working directory or any\n           of its subdirectories.\n    land: Create a merge commit with all commits generated by bulk-decaffeinate.`)\n    .action(commandArg => command = commandArg)\n    .option('-c, --config [path]',\n      `The config file to use. This arg may be specified multiple\n                              times. If unspecified, files like bulk-decaffeinate.config.js will\n                              be discovered and used.`,\n      (arg, args) => {args.push(arg); return args;}, [])\n    .option('-f, --file [path]',\n      `An absolute or relative path to decaffeinate. This arg may be\n                              specified multiple times.`,\n      (arg, args) => {args.push(arg); return args;}, [])\n    .option('-p, --path-file [path]',\n      `A file containing the paths of .coffee files to decaffeinate, one\n                              path per line. Paths can be either absolute or relative to the\n                              current working directory.`)\n    .option('-d, --dir [path]',\n      `A directory containing files to decaffeinate. All .coffee files in\n                              any subdirectory of this directory are considered for decaffeinate.`)\n    .option('--use-js-modules',\n      `If specified, decaffeinate will convert the code to use import/export\n                              syntax and a follow-up fix-imports step will correct any imports\n                              across the codebase.`)\n    .option('--land-base [revision]',\n      `The git revision to use as the base commit when running the \"land\"\n                              command. If none is specified, bulk-decaffeinate tries to use the\n                              first auto-generated commit in recent history.`)\n    .option('--num-workers [number]',\n      `The number of workers to use for parallel operations.`)\n    .option('--skip-verify',\n      `If specified, skips the initial verification step when running the\n                              \"convert\" command.`)\n    .option('--decaffeinate-path [path]',\n      `The path to the decaffeinate binary. If none is specified, it will\n                              be automatically discovered from node_modules and then from the\n                              PATH.`)\n    .option('--jscodeshift-path [path]',\n      `The path to the jscodeshift binary. If none is specified, it will be\n                              automatically discovered from node_modules and then from the PATH.`)\n    .option('--eslint-path [path]',\n      `The path to the eslint binary. If none is specified, it will be\n                              automatically discovered from node_modules and then from the PATH.`)\n    .option('--allow-invalid-constructors',\n      `Deprecated; decaffeinate now allows invalid constructors by default.`)\n    .parse(process.argv);\n\n  runCommand(command);\n}\n\nasync function runCommand(command) {\n  try {\n    if (command === 'check') {\n      let config = await resolveConfig(commander);\n      await check(config);\n    } else if (command === 'convert') {\n      let config = await resolveConfig(commander, {needsJscodeshift: true, needsEslint: true});\n      await convert(config);\n    } else if (command === 'modernize-js') {\n      let config = await resolveConfig(commander, {needsJscodeshift: true, needsEslint: true});\n      await modernizeJS(config);\n    } else if (command === 'view-errors') {\n      await viewErrors();\n    } else if (command === 'clean') {\n      await clean();\n    } else if (command === 'land') {\n      let config = await resolveConfig(commander);\n      await land(config);\n    } else {\n      commander.outputHelp();\n    }\n  } catch (e) {\n    process.exitCode = 1;\n    console.error(CLIError.formatError(e));\n  }\n}\n"],"names":["PREFIX","CLIError","message","e","startsWith","substring","length","Error","getFilesFromPathFile","filePath","readFile","fileContents","toString","split","lines","line","trim","exists","push","resultLines","getFilesUnderPath","dirPath","asyncPathPredicate","readdir","children","includes","child","resolve","join","stat","childPath","isDirectory","subdirCoffeeFiles","resultFiles","getTrackedFiles","git","raw","Set","stdout","map","s","COFFEE_FILE_RECOGNIZER","JS_FILE_RECOGNIZER","extensionFor","path","endsWith","extname","basePathFor","extension","dirname","basename","shouldConvertFile","recognizer","trackedFiles","hasRecognizedExtension","isExecutableScript","has","log","extensions","some","ext","isExtensionless","executable","contents","firstLine","shebangSuffix","backupPathFor","basePath","jsPathFor","config","customNames","outputFileExtension","decaffeinateOutPathFor","isLiterate","getFilesToProcess","resolveFilesToProcess","resolveFileFilter","filesToProcess","validateFilesToProcess","pathFile","searchDirectory","files","Array","from","sort","fileFilterFn","filter","jsPath","makeCLIFn","commandByPath","exec","maxBuffer","error","makeDecaffeinateVerifyFn","decaffeinatePath","decaffeinateArgs","literateFlag","runInParallel","args","asyncFn","numConcurrentProcesses","resultHandler","handleResult","index","result","activePromises","i","arg","Object","keys","Promise","race","values","results","pluralize","num","noun","STRINGS","word","buildStringFromValues","yDiff","mDiff","dDiff","hourDiff","minDiff","secDiff","delimiter","momentPreciseDiff","m1","m2","add","utcOffset","isSame","nodiff","isAfter","tmp","year","month","date","hour","minute","second","daysInLastFullMonth","moment","subtract","daysInMonth","runWithProgressBar","description","runInSeries","allowFailures","numWorkers","errorString","numFailures","write","numProcessed","numTotal","startTime","endTime","diffStr","format","check","printResults","decaffeinateResults","r","errorResults","writeFile","getVerboseErrors","JSON","stringify","successPaths","errorMessages","getStdout","matchString","indexOf","clean","p","filesToDelete","unlink","execLive","command","reject","childProcess","spawn","stdio","on","code","resolveConfig","commander","needsJscodeshift","needsEslint","applyConfig","filename","currentDirFiles","applyPossibleConfig","getCLIParamsConfig","resolveDecaffeinateArgs","resolveCustomNames","resolveFixImportsConfig","jscodeshiftScripts","landConfig","mochaEnvFilePattern","codePrefix","landBase","skipVerify","skipEslintFix","resolveDecaffeinatePath","resolveJscodeshiftPath","resolveEslintPath","useJSModules","fixImportsConfig","newConfig","requireUncached","assign","file","dir","useJsModules","jscodeshiftPath","eslintPath","resolveBinary","binaryName","nodeModulesPath","readline","createInterface","process","stdin","rl","question","close","answer","toLowerCase","entries","key","value","prependToFile","prependText","slice","prependCodePrefix","jsFiles","prependMochaEnv","RegExp","regex","test","f","testFiles","runEslintFix","isUpdate","makeEslintFixFn","eslintResults","messages","HEADER_COMMENT_LINES","runEslint","eslintStdout","eslintStderr","parse","eslintOutput","ruleId","ruleIds","todoUpdated","fixIssues","todo","sanityCheck","runFixImports","searchPath","absoluteImportPaths","__dirname","getEligibleFixImportsFiles","eligibleFixImportsFiles","relative","zlib","deflateSync","options","scriptPath","eligibleRelativePaths","encodedOptions","allJsFiles","resolvedPaths","resolvedPath","jsBasenames","jsBasename","runJscodeshiftScripts","resolveJscodeshiftScriptPath","makeCommit","commitMessage","userEmail","commit","author","convert","assertGitWorktreeClean","coffeeFiles","coffeePath","copy","movingCoffeeFiles","move","getShortDescription","shortDescription","renameCommitMsg","rm","decaffeinateOutPath","decaffeinateCommitMsg","postProcessCommitMsg","thirdCommitModifiedFiles","status","not_added","firstFile","land","remote","upstreamBranch","phabricatorAware","fetch","getCommits","commits","getDifferentialRevisionLine","checkout","remoteBranch","hash","conflicted","getCommitMessage","differentialRevisionLine","revparse","mergeFromTo","cherryPickHeadCommit","mergeMessage","to","all","allCommits","author_name","explicitBase","hasSeenDecaffeinateCommit","isDecaffeinateCommit","unshift","resultLine","commitHash","show","removeAutogeneratedHeader","removeHeadersFromFile","removeHeadersFromCode","newContents","j","foundMatch","modernizeJS","viewErrors","resultsJson","filesToOpen","openInRepl","encodeURIComponent","encodedFile","opn","url","wait","arguments","action","commandArg","option","argv","runCommand","outputHelp","exitCode","formatError"],"mappings":"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"}